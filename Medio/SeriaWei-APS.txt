SeriaWei/ASP

Requisição
http://api.github.com/repos/SeriaWei/ASP.NET-MVC-CMS/contents/EasyFrameWork/Reflection/ClassAction.cs

{
    "name": "ClassAction.cs",
    "path": "EasyFrameWork/Reflection/ClassAction.cs",
    "sha": "69091e352b0ac2f5467aa7489b31dacd9d4682a5",
    "size": 12734,
    "url": "https://api.github.com/repos/SeriaWei/ASP.NET-MVC-CMS/contents/EasyFrameWork/Reflection/ClassAction.cs?ref=master",
    "html_url": "https://github.com/SeriaWei/ASP.NET-MVC-CMS/blob/master/EasyFrameWork/Reflection/ClassAction.cs",
    "git_url": "https://api.github.com/repos/SeriaWei/ASP.NET-MVC-CMS/git/blobs/69091e352b0ac2f5467aa7489b31dacd9d4682a5",
    "download_url": "https://raw.githubusercontent.com/SeriaWei/ASP.NET-MVC-CMS/master/EasyFrameWork/Reflection/ClassAction.cs",
    "type": "file",
    "content": "LyogaHR0cDovL3d3dy56a2VhLm5ldC8gQ29weXJpZ2h0IDIwMTYgWktFQVNP\nRlQgaHR0cDovL3d3dy56a2VhLm5ldC9saWNlbnNlcyAqLwp1c2luZyBTeXN0\nZW07CnVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOwp1c2luZyBT\neXN0ZW0uQ29sbGVjdGlvbnMuU3BlY2lhbGl6ZWQ7CnVzaW5nIFN5c3RlbS5D\nb21wb25lbnRNb2RlbDsKdXNpbmcgU3lzdGVtLkxpbnE7CnVzaW5nIFN5c3Rl\nbS5SZWZsZWN0aW9uOwp1c2luZyBTeXN0ZW0uVGV4dDsKdXNpbmcgTWljcm9z\nb2Z0LlByYWN0aWNlcy5TZXJ2aWNlTG9jYXRpb247CgpuYW1lc3BhY2UgRWFz\neS5SZWZsZWN0aW9uCnsKICAgIHB1YmxpYyBjbGFzcyBDbGFzc0FjdGlvbgog\nICAgewogICAgICAgIC8vLyA8c3VtbWFyeT4KICAgICAgICAvLy8g5Y+W5Ye6\n57G755qE5bGe5oCn5YC8CiAgICAgICAgLy8vIDwvc3VtbWFyeT4KICAgICAg\nICAvLy8gPHR5cGVwYXJhbSBuYW1lPSJUIj7nsbvliKs8L3R5cGVwYXJhbT4K\nICAgICAgICAvLy8gPHBhcmFtIG5hbWU9Im9iaiI+5a+56LGhPC9wYXJhbT4K\nICAgICAgICAvLy8gPHJldHVybnM+6L+U5Zue5a2X5YW4PC9yZXR1cm5zPgog\nICAgICAgIHB1YmxpYyBzdGF0aWMgRGljdGlvbmFyeTxzdHJpbmcsIG9iamVj\ndD4gR2V0UHJvcGVydGllVmFsdWVzPFQ+KFQgb2JqKQogICAgICAgIHsKICAg\nICAgICAgICAgVHlwZSBvYmpUeXBlID0gdHlwZW9mKFQpOwogICAgICAgICAg\nICB2YXIgcHJvcGVydGllcyA9IG9ialR5cGUuR2V0UHJvcGVydGllcygpOwog\nICAgICAgICAgICByZXR1cm4gcHJvcGVydGllcy5XaGVyZShpdGVtID0+IGl0\nZW0uR2V0VmFsdWUob2JqLCBudWxsKSAhPSBudWxsKS5Ub0RpY3Rpb25hcnko\naXRlbSA9PiBpdGVtLk5hbWUsIGl0ZW0gPT4gaXRlbS5HZXRWYWx1ZShvYmos\nIG51bGwpKTsKICAgICAgICB9CiAgICAgICAgLy8vIDxzdW1tYXJ5PgogICAg\nICAgIC8vLyDojrflj5blsZ7mgKflgLwKICAgICAgICAvLy8gPC9zdW1tYXJ5\nPgogICAgICAgIC8vLyA8dHlwZXBhcmFtIG5hbWU9IlQiPuexu+WeizwvdHlw\nZXBhcmFtPgogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iaXRlbSI+57G75Z6L\n5a6e5L6LPC9wYXJhbT4KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InByb3Bl\ncnR5Ij7lsZ7mgKflkI3np7A8L3BhcmFtPgogICAgICAgIC8vLyA8cmV0dXJu\ncz7lsZ7mgKflgLw8L3JldHVybnM+CiAgICAgICAgcHVibGljIHN0YXRpYyBv\nYmplY3QgR2V0UHJvcGVydHlWYWx1ZTxUPihUIGl0ZW0sIHN0cmluZyBwcm9w\nZXJ0eSkKICAgICAgICB7CiAgICAgICAgICAgIFR5cGUgZW50aXR5VHlwZSA9\nIHR5cGVvZihUKTsKICAgICAgICAgICAgUHJvcGVydHlJbmZvIHByb3BlciA9\nIGVudGl0eVR5cGUuR2V0UHJvcGVydHkocHJvcGVydHkpOwogICAgICAgICAg\nICBpZiAocHJvcGVyICE9IG51bGwgJiYgcHJvcGVyLkNhblJlYWQpCiAgICAg\nICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcm9wZXIuR2V0VmFs\ndWUoaXRlbSwgbnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxz\nZSByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIHB1YmxpYyBzdGF0\naWMgb2JqZWN0IEdldE9ialByb3BlcnR5VmFsdWUob2JqZWN0IGl0ZW0sIHN0\ncmluZyBwcm9wZXJ0eSkKICAgICAgICB7CiAgICAgICAgICAgIFR5cGUgZW50\naXR5VHlwZSA9IGl0ZW0uR2V0VHlwZSgpOwogICAgICAgICAgICBQcm9wZXJ0\neUluZm8gcHJvcGVyID0gZW50aXR5VHlwZS5HZXRQcm9wZXJ0eShwcm9wZXJ0\neSk7CiAgICAgICAgICAgIGlmIChwcm9wZXIgIT0gbnVsbCAmJiBwcm9wZXIu\nQ2FuUmVhZCkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgcmV0dXJu\nIHByb3Blci5HZXRWYWx1ZShpdGVtLCBudWxsKTsKICAgICAgICAgICAgfQog\nICAgICAgICAgICBlbHNlIHJldHVybiBudWxsOwogICAgICAgIH0KCiAgICAg\nICAgLy8vIDxzdW1tYXJ5PgogICAgICAgIC8vLyDorr7nva7lsZ7mgKflgLwK\nICAgICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIC8vLyA8dHlwZXBhcmFt\nIG5hbWU9IlQiPjwvdHlwZXBhcmFtPgogICAgICAgIC8vLyA8cGFyYW0gbmFt\nZT0iaXRlbSI+PC9wYXJhbT4KICAgICAgICAvLy8gPHBhcmFtIG5hbWU9InBy\nb3BlcnR5Ij48L3BhcmFtPgogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0idmFs\ndWUiPjwvcGFyYW0+CiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIFNldFBy\nb3BlcnR5VmFsdWU8VD4oVCBpdGVtLCBzdHJpbmcgcHJvcGVydHksIG9iamVj\ndCB2YWx1ZSkKICAgICAgICB7CiAgICAgICAgICAgIFR5cGUgZW50aXR5VHlw\nZSA9IHR5cGVvZihUKTsKICAgICAgICAgICAgUHJvcGVydHlJbmZvIHByb3Bl\nciA9IGVudGl0eVR5cGUuR2V0UHJvcGVydHkocHJvcGVydHkpOwogICAgICAg\nICAgICBpZiAocHJvcGVyICE9IG51bGwgJiYgcHJvcGVyLkNhbldyaXRlKQog\nICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwcm9wZXIuU2V0VmFsdWUo\naXRlbSwgVmFsdWVDb252ZXJ0KHByb3BlciwgdmFsdWUpLCBudWxsKTsKICAg\nICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcHVibGljIHN0YXRpYyB2\nb2lkIFNldE9ialByb3BlcnR5VmFsdWUob2JqZWN0IG9iaiwgc3RyaW5nIHBy\nb3BlcnR5LCBvYmplY3QgdmFsdWUpCiAgICAgICAgewogICAgICAgICAgICBU\neXBlIGVudGl0eVR5cGUgPSBvYmouR2V0VHlwZSgpOwogICAgICAgICAgICBQ\ncm9wZXJ0eUluZm8gcHJvcGVyID0gZW50aXR5VHlwZS5HZXRQcm9wZXJ0eShw\ncm9wZXJ0eSk7CiAgICAgICAgICAgIGlmIChwcm9wZXIgIT0gbnVsbCAmJiBw\ncm9wZXIuQ2FuV3JpdGUpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAg\nIHByb3Blci5TZXRWYWx1ZShvYmosIFZhbHVlQ29udmVydChwcm9wZXIsIHZh\nbHVlKSwgbnVsbCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAg\nIC8vLyA8c3VtbWFyeT4KICAgICAgICAvLy8g5Yid5aeL5YyWTW9kZWws6Ieq\n5Yqo5a+55a+55bqU5bGe5oCn6LWL5YC8CiAgICAgICAgLy8vIDwvc3VtbWFy\neT4KICAgICAgICAvLy8gPHR5cGVwYXJhbSBuYW1lPSJUIj5Nb2RlbOexu+We\nizwvdHlwZXBhcmFtPgogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0iZGF0YSI+\n5pWw5o2uPC9wYXJhbT4KICAgICAgICAvLy8gPHJldHVybnM+6L+U5ZueTW9k\nZWzlr7nosaE8L3JldHVybnM+CiAgICAgICAgcHVibGljIHN0YXRpYyBUIEdl\ndE1vZGVsPFQ+KFN5c3RlbS5EYXRhLkRhdGFUYWJsZSBkYXRhLCBpbnQgUm93\nSW5kZXgpCiAgICAgICAgewogICAgICAgICAgICBpZiAoZGF0YSA9PSBudWxs\nIHx8IGRhdGEuUm93cy5Db3VudCA9PSAwKQogICAgICAgICAgICAgICAgcmV0\ndXJuIGRlZmF1bHQoVCk7CiAgICAgICAgICAgIFR5cGUgdHkgPSB0eXBlb2Yo\nVCk7CiAgICAgICAgICAgIFQgb2JqOwogICAgICAgICAgICBpZiAodHkuSXND\nbGFzcyAmJiB0eS5OYW1lICE9ICJTdHJpbmciKQogICAgICAgICAgICB7CiAg\nICAgICAgICAgICAgICBvYmogPSBTZXJ2aWNlTG9jYXRvci5DdXJyZW50Lkdl\ndEluc3RhbmNlPFQ+KCk7CiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydGll\ncyA9IHR5LkdldFByb3BlcnRpZXMoKTsKICAgICAgICAgICAgICAgIGlmIChw\ncm9wZXJ0aWVzLkFueSgpKQogICAgICAgICAgICAgICAgewogICAgICAgICAg\nICAgICAgICAgIGZvcmVhY2ggKHZhciBpdGVtIGluIHByb3BlcnRpZXMpCiAg\nICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBp\nZiAoZGF0YS5Db2x1bW5zLkNvbnRhaW5zKGl0ZW0uTmFtZSkgJiYgZGF0YS5S\nb3dzW1Jvd0luZGV4XVtpdGVtLk5hbWVdLkdldFR5cGUoKSAhPSB0eXBlb2Yo\nREJOdWxsKSAmJiBpdGVtLkNhbldyaXRlKQogICAgICAgICAgICAgICAgICAg\nICAgICAgICAgaXRlbS5TZXRWYWx1ZShvYmosIGRhdGEuUm93c1tSb3dJbmRl\neF1baXRlbS5OYW1lXSwgbnVsbCk7CiAgICAgICAgICAgICAgICAgICAgfQog\nICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZQogICAgICAg\nICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG9iaiA9IChUKVZhbHVl\nQ29udmVydCh0eSwgZGF0YS5Sb3dzW1Jvd0luZGV4XVswXSk7CiAgICAgICAg\nICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAg\nICAgICAgICB7CiAgICAgICAgICAgICAgICBvYmogPSAoVClWYWx1ZUNvbnZl\ncnQodHksIGRhdGEuUm93c1tSb3dJbmRleF1bMF0pOwogICAgICAgICAgICB9\nCiAgICAgICAgICAgIHJldHVybiBvYmo7CgogICAgICAgIH0KICAgICAgICAv\nLy8gPHN1bW1hcnk+CiAgICAgICAgLy8vIOiOt+WPluWunuS+i+WvueixoQog\nICAgICAgIC8vLyA8L3N1bW1hcnk+CiAgICAgICAgLy8vIDx0eXBlcGFyYW0g\nbmFtZT0iVCI+5a6e5L6L57G75Z6LPC90eXBlcGFyYW0+CiAgICAgICAgLy8v\nIDxwYXJhbSBuYW1lPSJkYXRhIj7mlbDmja48L3BhcmFtPgogICAgICAgIC8v\nLyA8cGFyYW0gbmFtZT0iUm93SW5kZXgiPuihjDwvcGFyYW0+CiAgICAgICAg\nLy8vIDxwYXJhbSBuYW1lPSJjb2x1bW5zIj7mlbDmja7liJfkuI7lrp7kvovl\nsZ7mgKfnmoTljLnphY3lhbPns7ssS2V55Li66KGo5YiX5ZCNLFZhbHVl5Li6\n5bGe5oCn5ZCNPC9wYXJhbT4KICAgICAgICAvLy8gPHJldHVybnM+5a6e5L6L\n5a+56LGhPC9yZXR1cm5zPgogICAgICAgIHB1YmxpYyBzdGF0aWMgVCBHZXRN\nb2RlbDxUPihTeXN0ZW0uRGF0YS5EYXRhVGFibGUgZGF0YSwgaW50IFJvd0lu\nZGV4LCBMaXN0PEtleVZhbHVlUGFpcjxzdHJpbmcsIHN0cmluZz4+IGNvbHVt\nbnMpCiAgICAgICAgewogICAgICAgICAgICBpZiAoZGF0YSA9PSBudWxsIHx8\nIGRhdGEuUm93cy5Db3VudCA9PSAwKQogICAgICAgICAgICAgICAgcmV0dXJu\nIGRlZmF1bHQoVCk7CiAgICAgICAgICAgIFR5cGUgdHkgPSB0eXBlb2YoVCk7\nCiAgICAgICAgICAgIHZhciBvYmogPSBTZXJ2aWNlTG9jYXRvci5DdXJyZW50\nLkdldEluc3RhbmNlPFQ+KCk7CiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBp\ndGVtIGluIGNvbHVtbnMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAg\nIGlmICghZGF0YS5Db2x1bW5zLkNvbnRhaW5zKGl0ZW0uS2V5KSkKICAgICAg\nICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIGlmICgh\nKGRhdGEuUm93c1tSb3dJbmRleF1baXRlbS5LZXldIGlzIERCTnVsbCkpCiAg\nICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgUHJvcGVydHlJ\nbmZvIHByb3BlcnR5ID0gdHkuR2V0UHJvcGVydHkoaXRlbS5WYWx1ZSk7CiAg\nICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LkNhbldyaXRlKQogICAg\nICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJv\ncGVydHkuU2V0VmFsdWUob2JqLCBWYWx1ZUNvbnZlcnQocHJvcGVydHksIGRh\ndGEuUm93c1tSb3dJbmRleF1baXRlbS5LZXldKSwgbnVsbCk7CiAgICAgICAg\nICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9\nCiAgICAgICAgICAgIHJldHVybiBvYmo7CiAgICAgICAgfQogICAgICAgIHB1\nYmxpYyBzdGF0aWMgVCBHZXRNb2RlbDxUPihTeXN0ZW0uRGF0YS5EYXRhVGFi\nbGUgZGF0YSwgaW50IFJvd0luZGV4LCBMaXN0PEtleVZhbHVlUGFpcjxzdHJp\nbmcsIHN0cmluZz4+IGNvbHVtbnMsIERpY3Rpb25hcnk8c3RyaW5nLCBQcm9w\nZXJ0eUluZm8+IHByb3BlcnRpZXMpCiAgICAgICAgewogICAgICAgICAgICBp\nZiAoZGF0YSA9PSBudWxsIHx8IGRhdGEuUm93cy5Db3VudCA9PSAwKQogICAg\nICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHQoVCk7CiAgICAgICAgICAgIHZh\nciBvYmogPSBTZXJ2aWNlTG9jYXRvci5DdXJyZW50LkdldEluc3RhbmNlPFQ+\nKCk7CiAgICAgICAgICAgIGZvcmVhY2ggKHZhciBpdGVtIGluIGNvbHVtbnMp\nCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICghZGF0YS5Db2x1\nbW5zLkNvbnRhaW5zKGl0ZW0uS2V5KSkKICAgICAgICAgICAgICAgICAgICBj\nb250aW51ZTsKICAgICAgICAgICAgICAgIGlmICghKGRhdGEuUm93c1tSb3dJ\nbmRleF1baXRlbS5LZXldIGlzIERCTnVsbCkgJiYgcHJvcGVydGllcy5Db250\nYWluc0tleShpdGVtLlZhbHVlKSkKICAgICAgICAgICAgICAgIHsKICAgICAg\nICAgICAgICAgICAgICBQcm9wZXJ0eUluZm8gcHJvcGVydHkgPSBwcm9wZXJ0\naWVzW2l0ZW0uVmFsdWVdOwogICAgICAgICAgICAgICAgICAgIGlmIChwcm9w\nZXJ0eS5DYW5Xcml0ZSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAg\nICAgICAgICAgICAgICAgIHByb3BlcnR5LlNldFZhbHVlKG9iaiwgVmFsdWVD\nb252ZXJ0KHByb3BlcnR5LCBkYXRhLlJvd3NbUm93SW5kZXhdW2l0ZW0uS2V5\nXSksIG51bGwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAg\nICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gb2JqOwog\nICAgICAgIH0KICAgICAgICAvLy8gPHN1bW1hcnk+CiAgICAgICAgLy8vICDl\niJ3lp4vljJZNb2RlbCzoh6rliqjlr7nlr7nlupTlsZ7mgKfotYvlgLwKICAg\nICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIC8vLyA8dHlwZXBhcmFtIG5h\nbWU9IlQiPk1vZGVs55qE57G75Z6LPC90eXBlcGFyYW0+CiAgICAgICAgLy8v\nIDxwYXJhbSBuYW1lPSJjb2xsZWN0aW9uIj7mlbDmja7pm4blkIg8L3BhcmFt\nPgogICAgICAgIC8vLyA8cmV0dXJucz7ov5Tlm55Nb2RlbOWvueixoTwvcmV0\ndXJucz4KICAgICAgICBwdWJsaWMgc3RhdGljIFQgR2V0TW9kZWw8VD4oTmFt\nZVZhbHVlQ29sbGVjdGlvbiBjb2xsZWN0aW9uKSB3aGVyZSBUIDogY2xhc3MK\nICAgICAgICB7CiAgICAgICAgICAgIFR5cGUgb2JqVHlwZSA9IHR5cGVvZihU\nKTsKICAgICAgICAgICAgdmFyIG9iaiA9IFNlcnZpY2VMb2NhdG9yLkN1cnJl\nbnQuR2V0SW5zdGFuY2U8VD4oKTsKICAgICAgICAgICAgdmFyIHByb3BlcnRp\nZXMgPSBvYmpUeXBlLkdldFByb3BlcnRpZXMoKTsKICAgICAgICAgICAgZm9y\nZWFjaCAoc3RyaW5nIGtleSBpbiBjb2xsZWN0aW9uLkFsbEtleXMpCiAgICAg\nICAgICAgIHsKICAgICAgICAgICAgICAgIGZvcmVhY2ggKHZhciBwcm9wZXJ0\neSBpbiBwcm9wZXJ0aWVzKQogICAgICAgICAgICAgICAgewogICAgICAgICAg\nICAgICAgICAgIGlmIChwcm9wZXJ0eS5OYW1lLkVxdWFscyhrZXkpKQogICAg\nICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3Ry\naW5nIHZhbHVlID0gY29sbGVjdGlvbltrZXldOwogICAgICAgICAgICAgICAg\nICAgICAgICBpZiAoIXN0cmluZy5Jc051bGxPckVtcHR5KHZhbHVlKSAmJiBw\ncm9wZXJ0eS5DYW5Xcml0ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAg\nIHByb3BlcnR5LlNldFZhbHVlKG9iaiwgVmFsdWVDb252ZXJ0KHByb3BlcnR5\nLCB2YWx1ZSksIG51bGwpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAg\nICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4g\nb2JqOwogICAgICAgIH0KICAgICAgICBwdWJsaWMgc3RhdGljIG9iamVjdCBH\nZXRNb2RlbChUeXBlIHRhcmdldCwgTmFtZVZhbHVlQ29sbGVjdGlvbiBjb2xs\nZWN0aW9uKQogICAgICAgIHsKICAgICAgICAgICAgb2JqZWN0IG9iaiA9IEFj\ndGl2YXRvci5DcmVhdGVJbnN0YW5jZSh0YXJnZXQpOwogICAgICAgICAgICB2\nYXIgcHJvcGVydGllcyA9IHRhcmdldC5HZXRQcm9wZXJ0aWVzKCk7CiAgICAg\nICAgICAgIGZvcmVhY2ggKHN0cmluZyBrZXkgaW4gY29sbGVjdGlvbi5BbGxL\nZXlzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBmb3JlYWNoICh2\nYXIgcHJvcGVydHkgaW4gcHJvcGVydGllcykKICAgICAgICAgICAgICAgIHsK\nICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkuTmFtZS5FcXVhbHMo\na2V5KSkKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAg\nICAgICAgIHN0cmluZyB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTsKICAgICAg\nICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpbmcuSXNOdWxsT3JFbXB0eSh2\nYWx1ZSkgJiYgcHJvcGVydHkuQ2FuV3JpdGUpCiAgICAgICAgICAgICAgICAg\nICAgICAgICAgICBwcm9wZXJ0eS5TZXRWYWx1ZShvYmosIFZhbHVlQ29udmVy\ndChwcm9wZXJ0eSwgdmFsdWUpLCBudWxsKTsKICAgICAgICAgICAgICAgICAg\nICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAg\nICAgcmV0dXJuIG9iajsKICAgICAgICB9CiAgICAgICAgLy8vIDxzdW1tYXJ5\nPgogICAgICAgIC8vLyDliJ3lp4vljJZNb2RlbCzoh6rliqjlr7nlr7nlupTl\nsZ7mgKfotYvlgLwKICAgICAgICAvLy8gPC9zdW1tYXJ5PgogICAgICAgIC8v\nLyA8dHlwZXBhcmFtIG5hbWU9IlQiPk1vZGVs57G75Z6LPC90eXBlcGFyYW0+\nCiAgICAgICAgLy8vIDxwYXJhbSBuYW1lPSJjb2xsZWN0aW9uIj7mlbDmja7p\nm4blkIg8L3BhcmFtPgogICAgICAgIC8vLyA8cGFyYW0gbmFtZT0icmVwbGFj\nZUtleSI+6KaB5pu/5o2i5o6JS0VZ55qE6YOo5YiGPC9wYXJhbT4KICAgICAg\nICAvLy8gPHJldHVybnM+TW9kZWzlr7nosaE8L3JldHVybnM+CiAgICAgICAg\ncHVibGljIHN0YXRpYyBUIEdldE1vZGVsPFQ+KE5hbWVWYWx1ZUNvbGxlY3Rp\nb24gY29sbGVjdGlvbiwgc3RyaW5nIHJlcGxhY2VLZXkpIHdoZXJlIFQgOiBj\nbGFzcwogICAgICAgIHsKICAgICAgICAgICAgVHlwZSBvYmpUeXBlID0gdHlw\nZW9mKFQpOwogICAgICAgICAgICB2YXIgb2JqID0gU2VydmljZUxvY2F0b3Iu\nQ3VycmVudC5HZXRJbnN0YW5jZTxUPigpOwogICAgICAgICAgICB2YXIgcHJv\ncGVydGllcyA9IG9ialR5cGUuR2V0UHJvcGVydGllcygpOwogICAgICAgICAg\nICBmb3JlYWNoIChzdHJpbmcga2V5IGluIGNvbGxlY3Rpb24uQWxsS2V5cykK\nICAgICAgICAgICAgewogICAgICAgICAgICAgICAgZm9yZWFjaCAodmFyIHBy\nb3BlcnR5IGluIHByb3BlcnRpZXMpCiAgICAgICAgICAgICAgICB7CiAgICAg\nICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5Lk5hbWUuRXF1YWxzKGtleS5S\nZXBsYWNlKHJlcGxhY2VLZXksICIiKSkpCiAgICAgICAgICAgICAgICAgICAg\newogICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgdmFsdWUgPSBjb2xs\nZWN0aW9uW2tleV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3Ry\naW5nLklzTnVsbE9yRW1wdHkodmFsdWUpICYmIHByb3BlcnR5LkNhbldyaXRl\nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuU2V0VmFs\ndWUob2JqLCBWYWx1ZUNvbnZlcnQocHJvcGVydHksIHZhbHVlKSwgbnVsbCk7\nCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAg\nICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBvYmo7CiAgICAgICAgfQoK\nICAgICAgICBwdWJsaWMgc3RhdGljIG9iamVjdCBHZXRNb2RlbChUeXBlIHRh\ncmdldCwgTmFtZVZhbHVlQ29sbGVjdGlvbiBjb2xsZWN0aW9uLCBzdHJpbmcg\ncmVwbGFjZUtleSkKICAgICAgICB7CiAgICAgICAgICAgIG9iamVjdCBvYmog\nPSBTZXJ2aWNlTG9jYXRvci5DdXJyZW50LkdldEluc3RhbmNlKHRhcmdldCk7\nCiAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0gdGFyZ2V0LkdldFByb3Bl\ncnRpZXMoKTsKICAgICAgICAgICAgZm9yZWFjaCAoc3RyaW5nIGtleSBpbiBj\nb2xsZWN0aW9uLkFsbEtleXMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAg\nICAgIGZvcmVhY2ggKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0aWVzKQogICAg\nICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0\neS5OYW1lLkVxdWFscyhrZXkuUmVwbGFjZShyZXBsYWNlS2V5LCAiIikpKQog\nICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAg\nc3RyaW5nIHZhbHVlID0gY29sbGVjdGlvbltrZXldOwogICAgICAgICAgICAg\nICAgICAgICAgICBpZiAoIXN0cmluZy5Jc051bGxPckVtcHR5KHZhbHVlKSAm\nJiBwcm9wZXJ0eS5DYW5Xcml0ZSkKICAgICAgICAgICAgICAgICAgICAgICAg\nICAgIHByb3BlcnR5LlNldFZhbHVlKG9iaiwgVmFsdWVDb252ZXJ0KHByb3Bl\ncnR5LCB2YWx1ZSksIG51bGwpOwogICAgICAgICAgICAgICAgICAgIH0KICAg\nICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1\ncm4gb2JqOwogICAgICAgIH0KICAgICAgICBwdWJsaWMgc3RhdGljIG9iamVj\ndCBWYWx1ZUNvbnZlcnQoUHJvcGVydHlJbmZvIHByb3BlcnR5LCBvYmplY3Qg\nb2JqKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuIFZhbHVlQ29udmVy\ndChwcm9wZXJ0eS5Qcm9wZXJ0eVR5cGUsIG9iaik7CiAgICAgICAgfQogICAg\nICAgIHB1YmxpYyBzdGF0aWMgb2JqZWN0IFZhbHVlQ29udmVydChUeXBlIHR5\ncGUsIG9iamVjdCBvYmopCiAgICAgICAgewogICAgICAgICAgICBpZiAob2Jq\nID09IG51bGwpIHJldHVybiBudWxsOwogICAgICAgICAgICBUeXBlQ29kZSBj\nb2RlID0gdHlwZS5Jc0dlbmVyaWNUeXBlID8gVHlwZS5HZXRUeXBlQ29kZSh0\neXBlLkdldEdlbmVyaWNBcmd1bWVudHMoKVswXSkgOiBUeXBlLkdldFR5cGVD\nb2RlKHR5cGUpOwogICAgICAgICAgICBzd2l0Y2ggKGNvZGUpCiAgICAgICAg\nICAgIHsKICAgICAgICAgICAgICAgIGNhc2UgVHlwZUNvZGUuQm9vbGVhbjoK\nICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAg\nIGlmIChvYmogIT0gbnVsbCkKICAgICAgICAgICAgICAgICAgICAgICAgewog\nICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHJlc3VsdCA9IG9i\nai5Ub1N0cmluZygpLlRvTG93ZXIoKTsKICAgICAgICAgICAgICAgICAgICAg\nICAgICAgIGlmIChyZXN1bHQgPT0gInRydWUiIHx8IHJlc3VsdCA9PSAiMSIp\nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7\nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHJldHVybiBmYWxz\nZTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAg\nICAgICAgICBlbHNlIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAg\nICB9CiAgICAgICAgICAgICAgICBjYXNlIFR5cGVDb2RlLkJ5dGU6IHJldHVy\nbiBDb252ZXJ0LlRvQnl0ZShvYmopOwogICAgICAgICAgICAgICAgY2FzZSBU\neXBlQ29kZS5DaGFyOiByZXR1cm4gQ29udmVydC5Ub0NoYXIob2JqKTsKICAg\nICAgICAgICAgICAgIGNhc2UgVHlwZUNvZGUuREJOdWxsOiByZXR1cm4gbnVs\nbDsKICAgICAgICAgICAgICAgIGNhc2UgVHlwZUNvZGUuRGF0ZVRpbWU6IHJl\ndHVybiBDb252ZXJ0LlRvRGF0ZVRpbWUob2JqKTsKICAgICAgICAgICAgICAg\nIGNhc2UgVHlwZUNvZGUuRGVjaW1hbDogcmV0dXJuIENvbnZlcnQuVG9EZWNp\nbWFsKG9iaik7CiAgICAgICAgICAgICAgICBjYXNlIFR5cGVDb2RlLkRvdWJs\nZTogcmV0dXJuIENvbnZlcnQuVG9Eb3VibGUob2JqKTsKICAgICAgICAgICAg\nICAgIGNhc2UgVHlwZUNvZGUuRW1wdHk6IHJldHVybiBudWxsOwogICAgICAg\nICAgICAgICAgY2FzZSBUeXBlQ29kZS5JbnQxNjogcmV0dXJuIENvbnZlcnQu\nVG9JbnQxNihvYmopOwogICAgICAgICAgICAgICAgY2FzZSBUeXBlQ29kZS5J\nbnQzMjogcmV0dXJuIENvbnZlcnQuVG9JbnQzMihvYmopOwogICAgICAgICAg\nICAgICAgY2FzZSBUeXBlQ29kZS5JbnQ2NDogcmV0dXJuIENvbnZlcnQuVG9J\nbnQ2NChvYmopOwogICAgICAgICAgICAgICAgY2FzZSBUeXBlQ29kZS5PYmpl\nY3Q6IHJldHVybiBvYmo7CiAgICAgICAgICAgICAgICBjYXNlIFR5cGVDb2Rl\nLlNCeXRlOiByZXR1cm4gQ29udmVydC5Ub1NCeXRlKG9iaik7CiAgICAgICAg\nICAgICAgICBjYXNlIFR5cGVDb2RlLlNpbmdsZTogcmV0dXJuIENvbnZlcnQu\nVG9TaW5nbGUob2JqKTsKICAgICAgICAgICAgICAgIGNhc2UgVHlwZUNvZGUu\nU3RyaW5nOiByZXR1cm4gQ29udmVydC5Ub1N0cmluZyhvYmopOwogICAgICAg\nICAgICAgICAgY2FzZSBUeXBlQ29kZS5VSW50MTY6IHJldHVybiBDb252ZXJ0\nLlRvVUludDE2KG9iaik7CiAgICAgICAgICAgICAgICBjYXNlIFR5cGVDb2Rl\nLlVJbnQzMjogcmV0dXJuIENvbnZlcnQuVG9VSW50MzIob2JqKTsKICAgICAg\nICAgICAgICAgIGNhc2UgVHlwZUNvZGUuVUludDY0OiByZXR1cm4gQ29udmVy\ndC5Ub1VJbnQ2NChvYmopOwogICAgICAgICAgICAgICAgZGVmYXVsdDogcmV0\ndXJuIG9iajsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBwdWJs\naWMgc3RhdGljIHZvaWQgQ29weVByb3BlcnR5KG9iamVjdCBvYmosIG9iamVj\ndCB0b09iaikKICAgICAgICB7CiAgICAgICAgICAgIFByb3BlcnR5RGVzY3Jp\ncHRvckNvbGxlY3Rpb24gb2JqUHJvcGVydGl0ZXMgPSBUeXBlRGVzY3JpcHRv\nci5HZXRQcm9wZXJ0aWVzKG9iaik7CiAgICAgICAgICAgIFByb3BlcnR5RGVz\nY3JpcHRvckNvbGxlY3Rpb24gdG9PYmpQcm9wZXJ0aXRlcyA9IFR5cGVEZXNj\ncmlwdG9yLkdldFByb3BlcnRpZXModG9PYmopOwoKICAgICAgICAgICAgZm9y\nZWFjaCAoUHJvcGVydHlEZXNjcmlwdG9yIGl0ZW0gaW4gb2JqUHJvcGVydGl0\nZXMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmICh0b09ialBy\nb3BlcnRpdGVzLkNvbnRhaW5zKGl0ZW0pKQogICAgICAgICAgICAgICAgewog\nICAgICAgICAgICAgICAgICAgIHRvT2JqUHJvcGVydGl0ZXNbaXRlbS5OYW1l\nXS5TZXRWYWx1ZSh0b09iaiwgaXRlbS5HZXRWYWx1ZShvYmopKTsKICAgICAg\nICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=\n",
    "encoding": "base64",
    "_links": {
        "self": "https://api.github.com/repos/SeriaWei/ASP.NET-MVC-CMS/contents/EasyFrameWork/Reflection/ClassAction.cs?ref=master",
        "git": "https://api.github.com/repos/SeriaWei/ASP.NET-MVC-CMS/git/blobs/69091e352b0ac2f5467aa7489b31dacd9d4682a5",
        "html": "https://github.com/SeriaWei/ASP.NET-MVC-CMS/blob/master/EasyFrameWork/Reflection/ClassAction.cs"
    }
}

Requisição Download
https://raw.githubusercontent.com/SeriaWei/ASP.NET-MVC-CMS/master/EasyFrameWork/Reflection/ClassAction.cs


/* http://www.zkea.net/ Copyright 2016 ZKEASOFT http://www.zkea.net/licenses */
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.Reflection;
using System.Text;
using Microsoft.Practices.ServiceLocation;

namespace Easy.Reflection
{
    public class ClassAction
    {
        /// <summary>
        /// 取出类的属性值
        /// </summary>
        /// <typeparam name="T">类别</typeparam>
        /// <param name="obj">对象</param>
        /// <returns>返回字典</returns>
        public static Dictionary<string, object> GetPropertieValues<T>(T obj)
        {
            Type objType = typeof(T);
            var properties = objType.GetProperties();
            return properties.Where(item => item.GetValue(obj, null) != null).ToDictionary(item => item.Name, item => item.GetValue(obj, null));
        }
        /// <summary>
        /// 获取属性值
        /// </summary>
        /// <typeparam name="T">类型</typeparam>
        /// <param name="item">类型实例</param>
        /// <param name="property">属性名称</param>
        /// <returns>属性值</returns>
        public static object GetPropertyValue<T>(T item, string property)
        {
            Type entityType = typeof(T);
            PropertyInfo proper = entityType.GetProperty(property);
            if (proper != null && proper.CanRead)
            {
                return proper.GetValue(item, null);
            }
            else return null;
        }

        public static object GetObjPropertyValue(object item, string property)
        {
            Type entityType = item.GetType();
            PropertyInfo proper = entityType.GetProperty(property);
            if (proper != null && proper.CanRead)
            {
                return proper.GetValue(item, null);
            }
            else return null;
        }

        /// <summary>
        /// 设置属性值
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="item"></param>
        /// <param name="property"></param>
        /// <param name="value"></param>
        public static void SetPropertyValue<T>(T item, string property, object value)
        {
            Type entityType = typeof(T);
            PropertyInfo proper = entityType.GetProperty(property);
            if (proper != null && proper.CanWrite)
            {
                proper.SetValue(item, ValueConvert(proper, value), null);
            }
        }

        public static void SetObjPropertyValue(object obj, string property, object value)
        {
            Type entityType = obj.GetType();
            PropertyInfo proper = entityType.GetProperty(property);
            if (proper != null && proper.CanWrite)
            {
                proper.SetValue(obj, ValueConvert(proper, value), null);
            }
        }

        /// <summary>
        /// 初始化Model,自动对对应属性赋值
        /// </summary>
        /// <typeparam name="T">Model类型</typeparam>
        /// <param name="data">数据</param>
        /// <returns>返回Model对象</returns>
        public static T GetModel<T>(System.Data.DataTable data, int RowIndex)
        {
            if (data == null || data.Rows.Count == 0)
                return default(T);
            Type ty = typeof(T);
            T obj;
            if (ty.IsClass && ty.Name != "String")
            {
                obj = ServiceLocator.Current.GetInstance<T>();
                var properties = ty.GetProperties();
                if (properties.Any())
                {
                    foreach (var item in properties)
                    {
                        if (data.Columns.Contains(item.Name) && data.Rows[RowIndex][item.Name].GetType() != typeof(DBNull) && item.CanWrite)
                            item.SetValue(obj, data.Rows[RowIndex][item.Name], null);
                    }
                }
                else
                {
                    obj = (T)ValueConvert(ty, data.Rows[RowIndex][0]);
                }
            }
            else
            {
                obj = (T)ValueConvert(ty, data.Rows[RowIndex][0]);
            }
            return obj;

        }
        /// <summary>
        /// 获取实例对象
        /// </summary>
        /// <typeparam name="T">实例类型</typeparam>
        /// <param name="data">数据</param>
        /// <param name="RowIndex">行</param>
        /// <param name="columns">数据列与实例属性的匹配关系,Key为表列名,Value为属性名</param>
        /// <returns>实例对象</returns>
        public static T GetModel<T>(System.Data.DataTable data, int RowIndex, List<KeyValuePair<string, string>> columns)
        {
            if (data == null || data.Rows.Count == 0)
                return default(T);
            Type ty = typeof(T);
            var obj = ServiceLocator.Current.GetInstance<T>();
            foreach (var item in columns)
            {
                if (!data.Columns.Contains(item.Key))
                    continue;
                if (!(data.Rows[RowIndex][item.Key] is DBNull))
                {
                    PropertyInfo property = ty.GetProperty(item.Value);
                    if (property.CanWrite)
                    {
                        property.SetValue(obj, ValueConvert(property, data.Rows[RowIndex][item.Key]), null);
                    }
                }
            }
            return obj;
        }
        public static T GetModel<T>(System.Data.DataTable data, int RowIndex, List<KeyValuePair<string, string>> columns, Dictionary<string, PropertyInfo> properties)
        {
            if (data == null || data.Rows.Count == 0)
                return default(T);
            var obj = ServiceLocator.Current.GetInstance<T>();
            foreach (var item in columns)
            {
                if (!data.Columns.Contains(item.Key))
                    continue;
                if (!(data.Rows[RowIndex][item.Key] is DBNull) && properties.ContainsKey(item.Value))
                {
                    PropertyInfo property = properties[item.Value];
                    if (property.CanWrite)
                    {
                        property.SetValue(obj, ValueConvert(property, data.Rows[RowIndex][item.Key]), null);
                    }
                }
            }
            return obj;
        }
        /// <summary>
        ///  初始化Model,自动对对应属性赋值
        /// </summary>
        /// <typeparam name="T">Model的类型</typeparam>
        /// <param name="collection">数据集合</param>
        /// <returns>返回Model对象</returns>
        public static T GetModel<T>(NameValueCollection collection) where T : class
        {
            Type objType = typeof(T);
            var obj = ServiceLocator.Current.GetInstance<T>();
            var properties = objType.GetProperties();
            foreach (string key in collection.AllKeys)
            {
                foreach (var property in properties)
                {
                    if (property.Name.Equals(key))
                    {
                        string value = collection[key];
                        if (!string.IsNullOrEmpty(value) && property.CanWrite)
                            property.SetValue(obj, ValueConvert(property, value), null);
                    }
                }
            }
            return obj;
        }
        public static object GetModel(Type target, NameValueCollection collection)
        {
            object obj = Activator.CreateInstance(target);
            var properties = target.GetProperties();
            foreach (string key in collection.AllKeys)
            {
                foreach (var property in properties)
                {
                    if (property.Name.Equals(key))
                    {
                        string value = collection[key];
                        if (!string.IsNullOrEmpty(value) && property.CanWrite)
                            property.SetValue(obj, ValueConvert(property, value), null);
                    }
                }
            }
            return obj;
        }
        /// <summary>
        /// 初始化Model,自动对对应属性赋值
        /// </summary>
        /// <typeparam name="T">Model类型</typeparam>
        /// <param name="collection">数据集合</param>
        /// <param name="replaceKey">要替换掉KEY的部分</param>
        /// <returns>Model对象</returns>
        public static T GetModel<T>(NameValueCollection collection, string replaceKey) where T : class
        {
            Type objType = typeof(T);
            var obj = ServiceLocator.Current.GetInstance<T>();
            var properties = objType.GetProperties();
            foreach (string key in collection.AllKeys)
            {
                foreach (var property in properties)
                {
                    if (property.Name.Equals(key.Replace(replaceKey, "")))
                    {
                        string value = collection[key];
                        if (!string.IsNullOrEmpty(value) && property.CanWrite)
                            property.SetValue(obj, ValueConvert(property, value), null);
                    }
                }
            }
            return obj;
        }

        public static object GetModel(Type target, NameValueCollection collection, string replaceKey)
        {
            object obj = ServiceLocator.Current.GetInstance(target);
            var properties = target.GetProperties();
            foreach (string key in collection.AllKeys)
            {
                foreach (var property in properties)
                {
                    if (property.Name.Equals(key.Replace(replaceKey, "")))
                    {
                        string value = collection[key];
                        if (!string.IsNullOrEmpty(value) && property.CanWrite)
                            property.SetValue(obj, ValueConvert(property, value), null);
                    }
                }
            }
            return obj;
        }
        public static object ValueConvert(PropertyInfo property, object obj)
        {
            return ValueConvert(property.PropertyType, obj);
        }
        public static object ValueConvert(Type type, object obj)
        {
            if (obj == null) return null;
            TypeCode code = type.IsGenericType ? Type.GetTypeCode(type.GetGenericArguments()[0]) : Type.GetTypeCode(type);
            switch (code)
            {
                case TypeCode.Boolean:
                    {
                        if (obj != null)
                        {
                            string result = obj.ToString().ToLower();
                            if (result == "true" || result == "1")
                                return true;
                            else return false;
                        }
                        else return false;
                    }
                case TypeCode.Byte: return Convert.ToByte(obj);
                case TypeCode.Char: return Convert.ToChar(obj);
                case TypeCode.DBNull: return null;
                case TypeCode.DateTime: return Convert.ToDateTime(obj);
                case TypeCode.Decimal: return Convert.ToDecimal(obj);
                case TypeCode.Double: return Convert.ToDouble(obj);
                case TypeCode.Empty: return null;
                case TypeCode.Int16: return Convert.ToInt16(obj);
                case TypeCode.Int32: return Convert.ToInt32(obj);
                case TypeCode.Int64: return Convert.ToInt64(obj);
                case TypeCode.Object: return obj;
                case TypeCode.SByte: return Convert.ToSByte(obj);
                case TypeCode.Single: return Convert.ToSingle(obj);
                case TypeCode.String: return Convert.ToString(obj);
                case TypeCode.UInt16: return Convert.ToUInt16(obj);
                case TypeCode.UInt32: return Convert.ToUInt32(obj);
                case TypeCode.UInt64: return Convert.ToUInt64(obj);
                default: return obj;
            }
        }
        public static void CopyProperty(object obj, object toObj)
        {
            PropertyDescriptorCollection objPropertites = TypeDescriptor.GetProperties(obj);
            PropertyDescriptorCollection toObjPropertites = TypeDescriptor.GetProperties(toObj);

            foreach (PropertyDescriptor item in objPropertites)
            {
                if (toObjPropertites.Contains(item))
                {
                    toObjPropertites[item.Name].SetValue(toObj, item.GetValue(obj));
                }
            }
        }
    }
}
